# formularz_bot.py
"""
Bot Telegram ‚Äì zg≈Çaszanie zamian dy≈ºur√≥w.

‚Ä¢ Przyciski inline do wyboru dnia.
‚Ä¢ Obs≈Çuga wƒÖtk√≥w (forum topics): kolejne wiadomo≈õci trafiajƒÖ do tego samego
  wƒÖtku, z kt√≥rego wystartowano /start.
‚Ä¢ Po zako≈Ñczeniu rozmowy bot kasuje swoje i¬†u≈ºytkownika wiadomo≈õci.
"""

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ConversationHandler,
    CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
from telegram.error import BadRequest

# ---------- KONST ---------
DZIE≈É, ZMIANA, KTO_ODDAJE, KOMU = range(4)

GROUP_CHAT_ID   = -1002360593885   # ID grupy
GROUP_THREAD_ID = 4962             # ID wƒÖtku ‚ÄúTEST‚Äù, do kt√≥rego trafia gotowe zg≈Çoszenie

# ---------- POMOCNICZE ----
async def _send_and_track(
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    thread_id: int | None,
    text: str,
    to_delete: list[int],
    reply_markup=None,
):
    """Wy≈õlij wiadomo≈õƒá w dany czat/wƒÖtek i zapisz id do sprzƒÖtania."""
    msg = await context.bot.send_message(
        chat_id=chat_id,
        message_thread_id=thread_id,
        text=text,
        reply_markup=reply_markup,
    )
    to_delete.append(msg.message_id)
    return msg


# ---------- HANDLERY ------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """PoczƒÖtek rozmowy ‚Äì¬†przyciski z dniami tygodnia."""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(d, callback_data=d) for d in ("Poniedzia≈Çek", "Wtorek", "≈öroda")],
        [InlineKeyboardButton(d, callback_data=d) for d in ("Czwartek", "PiƒÖtek", "Sobota")],
        [InlineKeyboardButton("Niedziela", callback_data="Niedziela")],
    ])

    # zapisz identyfikatory czatu i¬†wƒÖtku, w kt√≥rym uruchomiono /start
    context.user_data["chat_id"]   = update.effective_chat.id
    context.user_data["thread_id"] = update.message.message_thread_id    # None poza forum
    context.user_data["to_delete"] = []

    msg = await update.message.reply_text("üóì Wybierz dzie≈Ñ zamiany:", reply_markup=keyboard)
    context.user_data["to_delete"].append(msg.message_id)
    return DZIE≈É


async def dzien_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Klikniƒôto kafelek z dniem."""
    q = update.callback_query
    await q.answer()
    context.user_data["dzien"] = q.data

    # stary kafelek zostawiamy do sprzƒÖtania ‚Äë¬†skasujemy go od razu, je≈õli siƒô¬†uda
    try:
        await q.message.delete()
    except BadRequest:
        context.user_data["to_delete"].append(q.message.message_id)

    await _send_and_track(
        context,
        chat_id=context.user_data["chat_id"],
        thread_id=context.user_data["thread_id"],
        text="üïê Podaj zmianƒô:",
        reply_markup=ReplyKeyboardRemove(),
        to_delete=context.user_data["to_delete"],
    )
    return ZMIANA


async def zmiana(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["zmiana"] = update.message.text
    context.user_data["to_delete"].append(update.message.message_id)

    await _send_and_track(
        context,
        context.user_data["chat_id"],
        context.user_data["thread_id"],
        "üë§ Kto oddaje zmianƒô?",
        context.user_data["to_delete"],
    )
    return KTO_ODDAJE


async def kto(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["kto"] = update.message.text
    context.user_data["to_delete"].append(update.message.message_id)

    await _send_and_track(
        context,
        context.user_data["chat_id"],
        context.user_data["thread_id"],
        "‚û°Ô∏è Komu oddajesz zmianƒô?",
        context.user_data["to_delete"],
    )
    return KOMU


async def komu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["komu"] = update.message.text
    context.user_data["to_delete"].append(update.message.message_id)

    d = context.user_data
    zg≈Çoszenie = (
        f"üìù **Nowe zg≈Çoszenie zamiany**:\n\n"
        f"üìÖ Dzie≈Ñ: {d['dzien']}\n"
        f"‚è∞ Zmiana: {d['zmiana']}\n"
        f"üë§ Oddaje: {d['kto']}\n"
        f"‚û°Ô∏è Komu: {d['komu']}"
    )
    # wysy≈Çka do wƒÖtku TEST w¬†grupie
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=GROUP_THREAD_ID,
        text=zg≈Çoszenie,
        parse_mode="Markdown",
    )

    await _send_and_track(
        context,
        context.user_data["chat_id"],
        context.user_data["thread_id"],
        "‚úÖ Dziƒôkujemy! Zg≈Çoszenie zosta≈Ço wys≈Çane.",
        context.user_data["to_delete"],
    )

    # ---------- SPRZƒÑTANIE ----------
    for mid in context.user_data["to_delete"]:
        try:
            await context.bot.delete_message(context.user_data["chat_id"], mid)
        except BadRequest:
            pass

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    for mid in context.user_data.get("to_delete", []):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=mid)
        except BadRequest:
            pass
    await update.message.reply_text("‚ùå Formularz zosta≈Ç anulowany.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ---------- MAIN ------------
def main() -> None:
    import os

    # --- TOKEN ---
    TOKEN = os.getenv("BOT_TOKEN")          # export BOT_TOKEN="123:ABC..."
    TOKEN = "8087667975:AAFf3ZrcV4SRD-nMTeldU-a2bw5Ee__CxHQ"           # ‚Üê odkomentuj, je≈ºeli wolisz wpisaƒá go na sztywno
    if not TOKEN:
        raise RuntimeError("Brak zmiennej ≈õrodowiskowej BOT_TOKEN!")

    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DZIE≈É:       [CallbackQueryHandler(dzien_cb)],
            ZMIANA:      [MessageHandler(filters.TEXT & ~filters.COMMAND, zmiana)],
            KTO_ODDAJE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, kto)],
            KOMU:        [MessageHandler(filters.TEXT & ~filters.COMMAND, komu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
